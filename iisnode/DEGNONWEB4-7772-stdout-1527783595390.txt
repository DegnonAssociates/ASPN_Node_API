Started listening at \\.\pipe\b2704ffa-669c-467c-bfbe-43ce6c2f9004
ReqRoute:  undefined
router:  IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      Pipe {
        writeQueueSize: 0,
        owner: [Circular],
        onread: 
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        reading: true,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: bound onceWrapper] [length]: 0, [name]: 'bound onceWrapper', listener: [Object] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        finish: 
         { [Function: onSocketFinish]
           [length]: 0,
           [name]: 'onSocketFinish',
           [prototype]: onSocketFinish { [constructor]: [Circular] } },
        _socketEnd: 
         { [Function: onSocketEnd]
           [length]: 0,
           [name]: 'onSocketEnd',
           [prototype]: onSocketEnd { [constructor]: [Circular] } },
        drain: 
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [Object] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout: 
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data: { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error: 
         [ { [Function: socketOnError] [length]: 1, [name]: 'socketOnError', [prototype]: [Object] },
           { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] },
           [length]: 2 ],
        close: 
         [ { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [Object] },
           { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] },
           [length]: 3 ],
        resume: 
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause: 
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: 
         { next: null,
           entry: null,
           finish: { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _writev: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [Object],
              [constructor]: [Object],
              domain: undefined,
              _events: [Object],
              _maxListeners: undefined,
              setMaxListeners: [Object],
              getMaxListeners: [Object],
              emit: [Object],
              addListener: [Object],
              on: [Object],
              prependListener: [Object],
              once: [Object],
              prependOnceListener: [Object],
              removeListener: [Object],
              removeAllListeners: [Object],
              listeners: [Object],
              listenerCount: [Object],
              eventNames: [Object],
              init: [Object],
              defaultConfiguration: [Object],
              lazyrouter: [Object],
              handle: [Object],
              use: [Object],
              route: [Object],
              engine: [Object],
              param: [Object],
              set: [Object],
              path: [Object],
              enabled: [Object],
              disabled: [Object],
              enable: [Object],
              disable: [Object],
              acl: [Object],
              bind: [Object],
              checkout: [Object],
              connect: [Object],
              copy: [Object],
              delete: [Object],
              get: [Object],
              head: [Object],
              link: [Object],
              lock: [Object],
              'm-search': [Object],
              merge: [Object],
              mkactivity: [Object],
              mkcalendar: [Object],
              mkcol: [Object],
              move: [Object],
              notify: [Object],
              options: [Object],
              patch: [Object],
              post: [Object],
              propfind: [Object],
              proppatch: [Object],
              purge: [Object],
              put: [Object],
              rebind: [Object],
              report: [Object],
              search: [Object],
              source: [Object],
              subscribe: [Object],
              trace: [Object],
              unbind: [Object],
              unlink: [Object],
              unlock: [Object],
              unsubscribe: [Object],
              all: [Object],
              del: [Object],
              render: [Object],
              listen: [Object],
              request: [Object],
              response: [Object],
              cache: {},
              engines: {},
              settings: [Object],
              _eventsCount: 1,
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Object] },
           connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         Pipe {
           writeQueueSize: 0,
           onconnection: { [Function: onconnection] [length]: 2, [name]: 'onconnection', [prototype]: [Object] },
           owner: [Circular] },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
        _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
        [Symbol(asyncId)]: 3 },
     _server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [Object],
              [constructor]: [Object],
              domain: undefined,
              _events: [Object],
              _maxListeners: undefined,
              setMaxListeners: [Object],
              getMaxListeners: [Object],
              emit: [Object],
              addListener: [Object],
              on: [Object],
              prependListener: [Object],
              once: [Object],
              prependOnceListener: [Object],
              removeListener: [Object],
              removeAllListeners: [Object],
              listeners: [Object],
              listenerCount: [Object],
              eventNames: [Object],
              init: [Object],
              defaultConfiguration: [Object],
              lazyrouter: [Object],
              handle: [Object],
              use: [Object],
              route: [Object],
              engine: [Object],
              param: [Object],
              set: [Object],
              path: [Object],
              enabled: [Object],
              disabled: [Object],
              enable: [Object],
              disable: [Object],
              acl: [Object],
              bind: [Object],
              checkout: [Object],
              connect: [Object],
              copy: [Object],
              delete: [Object],
              get: [Object],
              head: [Object],
              link: [Object],
              lock: [Object],
              'm-search': [Object],
              merge: [Object],
              mkactivity: [Object],
              mkcalendar: [Object],
              mkcol: [Object],
              move: [Object],
              notify: [Object],
              options: [Object],
              patch: [Object],
              post: [Object],
              propfind: [Object],
              proppatch: [Object],
              purge: [Object],
              put: [Object],
              rebind: [Object],
              report: [Object],
              search: [Object],
              source: [Object],
              subscribe: [Object],
              trace: [Object],
              unbind: [Object],
              unlink: [Object],
              unlock: [Object],
              unsubscribe: [Object],
              all: [Object],
              del: [Object],
              render: [Object],
              listen: [Object],
              request: [Object],
              response: [Object],
              cache: {},
              engines: {},
              settings: [Object],
              _eventsCount: 1,
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Object] },
           connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         Pipe {
           writeQueueSize: 0,
           onconnection: { [Function: onconnection] [length]: 2, [name]: 'onconnection', [prototype]: [Object] },
           owner: [Circular] },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
        _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
        [Symbol(asyncId)]: 3 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': { [Function: listOnTimeout] [length]: 0, [name]: 'listOnTimeout', [prototype]: [Object] },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': { [Function: listOnTimeout] [length]: 0, [name]: 'listOnTimeout', [prototype]: [Object] },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 1310,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': 
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1': 
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2': 
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3': 
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4': { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on: 
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     read: 
      { [Function]
        [length]: 1,
        [name]: '',
        [prototype]: { [constructor]: [Circular] } },
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: 
         { finish: [ [Object], [Object], [length]: 2 ],
           end: { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: 
         { [Function: writeHead]
           [length]: 1,
           [name]: 'writeHead',
           [prototype]: writeHead { [constructor]: [Circular] } },
        __onFinished: 
         { [Function: listener]
           [length]: 1,
           [name]: 'listener',
           [prototype]: listener { [constructor]: [Circular] },
           queue: [ [Object], [length]: 1 ] },
        [Symbol(outHeadersKey)]: { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(asyncId)]: 5,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 7,
     [Symbol(triggerAsyncId)]: 5 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      Pipe {
        writeQueueSize: 0,
        owner: [Circular],
        onread: 
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        reading: true,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: bound onceWrapper] [length]: 0, [name]: 'bound onceWrapper', listener: [Object] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        finish: 
         { [Function: onSocketFinish]
           [length]: 0,
           [name]: 'onSocketFinish',
           [prototype]: onSocketFinish { [constructor]: [Circular] } },
        _socketEnd: 
         { [Function: onSocketEnd]
           [length]: 0,
           [name]: 'onSocketEnd',
           [prototype]: onSocketEnd { [constructor]: [Circular] } },
        drain: 
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [Object] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout: 
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data: { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error: 
         [ { [Function: socketOnError] [length]: 1, [name]: 'socketOnError', [prototype]: [Object] },
           { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] },
           [length]: 2 ],
        close: 
         [ { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [Object] },
           { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] },
           [length]: 3 ],
        resume: 
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause: 
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: 
         { next: null,
           entry: null,
           finish: { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _writev: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [Object],
              [constructor]: [Object],
              domain: undefined,
              _events: [Object],
              _maxListeners: undefined,
              setMaxListeners: [Object],
              getMaxListeners: [Object],
              emit: [Object],
              addListener: [Object],
              on: [Object],
              prependListener: [Object],
              once: [Object],
              prependOnceListener: [Object],
              removeListener: [Object],
              removeAllListeners: [Object],
              listeners: [Object],
              listenerCount: [Object],
              eventNames: [Object],
              init: [Object],
              defaultConfiguration: [Object],
              lazyrouter: [Object],
              handle: [Object],
              use: [Object],
              route: [Object],
              engine: [Object],
              param: [Object],
              set: [Object],
              path: [Object],
              enabled: [Object],
              disabled: [Object],
              enable: [Object],
              disable: [Object],
              acl: [Object],
              bind: [Object],
              checkout: [Object],
              connect: [Object],
              copy: [Object],
              delete: [Object],
              get: [Object],
              head: [Object],
              link: [Object],
              lock: [Object],
              'm-search': [Object],
              merge: [Object],
              mkactivity: [Object],
              mkcalendar: [Object],
              mkcol: [Object],
              move: [Object],
              notify: [Object],
              options: [Object],
              patch: [Object],
              post: [Object],
              propfind: [Object],
              proppatch: [Object],
              purge: [Object],
              put: [Object],
              rebind: [Object],
              report: [Object],
              search: [Object],
              source: [Object],
              subscribe: [Object],
              trace: [Object],
              unbind: [Object],
              unlink: [Object],
              unlock: [Object],
              unsubscribe: [Object],
              all: [Object],
              del: [Object],
              render: [Object],
              listen: [Object],
              request: [Object],
              response: [Object],
              cache: {},
              engines: {},
              settings: [Object],
              _eventsCount: 1,
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Object] },
           connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         Pipe {
           writeQueueSize: 0,
           onconnection: { [Function: onconnection] [length]: 2, [name]: 'onconnection', [prototype]: [Object] },
           owner: [Circular] },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
        _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
        [Symbol(asyncId)]: 3 },
     _server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [Object],
              [constructor]: [Object],
              domain: undefined,
              _events: [Object],
              _maxListeners: undefined,
              setMaxListeners: [Object],
              getMaxListeners: [Object],
              emit: [Object],
              addListener: [Object],
              on: [Object],
              prependListener: [Object],
              once: [Object],
              prependOnceListener: [Object],
              removeListener: [Object],
              removeAllListeners: [Object],
              listeners: [Object],
              listenerCount: [Object],
              eventNames: [Object],
              init: [Object],
              defaultConfiguration: [Object],
              lazyrouter: [Object],
              handle: [Object],
              use: [Object],
              route: [Object],
              engine: [Object],
              param: [Object],
              set: [Object],
              path: [Object],
              enabled: [Object],
              disabled: [Object],
              enable: [Object],
              disable: [Object],
              acl: [Object],
              bind: [Object],
              checkout: [Object],
              connect: [Object],
              copy: [Object],
              delete: [Object],
              get: [Object],
              head: [Object],
              link: [Object],
              lock: [Object],
              'm-search': [Object],
              merge: [Object],
              mkactivity: [Object],
              mkcalendar: [Object],
              mkcol: [Object],
              move: [Object],
              notify: [Object],
              options: [Object],
              patch: [Object],
              post: [Object],
              propfind: [Object],
              proppatch: [Object],
              purge: [Object],
              put: [Object],
              rebind: [Object],
              report: [Object],
              search: [Object],
              source: [Object],
              subscribe: [Object],
              trace: [Object],
              unbind: [Object],
              unlink: [Object],
              unlock: [Object],
              unsubscribe: [Object],
              all: [Object],
              del: [Object],
              render: [Object],
              listen: [Object],
              request: [Object],
              response: [Object],
              cache: {},
              engines: {},
              settings: [Object],
              _eventsCount: 1,
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Object] },
           connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         Pipe {
           writeQueueSize: 0,
           onconnection: { [Function: onconnection] [length]: 2, [name]: 'onconnection', [prototype]: [Object] },
           owner: [Circular] },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
        _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
        [Symbol(asyncId)]: 3 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': { [Function: listOnTimeout] [length]: 0, [name]: 'listOnTimeout', [prototype]: [Object] },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': { [Function: listOnTimeout] [length]: 0, [name]: 'listOnTimeout', [prototype]: [Object] },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 1310,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': 
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1': 
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2': 
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3': 
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4': { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on: 
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     read: 
      { [Function]
        [length]: 1,
        [name]: '',
        [prototype]: { [constructor]: [Circular] } },
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: 
         { finish: [ [Object], [Object], [length]: 2 ],
           end: { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: 
         { [Function: writeHead]
           [length]: 1,
           [name]: 'writeHead',
           [prototype]: writeHead { [constructor]: [Circular] } },
        __onFinished: 
         { [Function: listener]
           [length]: 1,
           [name]: 'listener',
           [prototype]: listener { [constructor]: [Circular] },
           queue: [ [Object], [length]: 1 ] },
        [Symbol(outHeadersKey)]: { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(asyncId)]: 5,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 7,
     [Symbol(triggerAsyncId)]: 5 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { 'cache-control': 'no-cache',
     connection: 'keep-alive',
     'content-length': '0',
     accept: '*/*',
     'accept-encoding': 'gzip, deflate',
     cookie: 'CFGLOBALS=urltoken%3DCFID%23%3D1244685%26CFTOKEN%23%3Dbb7b42884b7da9ac%2D4F657BC4%2DC29B%2D87E3%2D2BC930C9FCEF2B6E%23lastvisit%3D%7Bts%20%272018%2D05%2D02%2011%3A48%3A11%27%7D%23hitcount%3D12%23timecreated%3D%7Bts%20%272018%2D04%2D25%2013%3A02%3A05%27%7D%23cftoken%3D4787f56a879c4c89%2DEC3DC69C%2DC29B%2D87E3%2D228C0668E65EB660%23cfid%3D1200254%23; CFCLIENT_ASPN_DISCUSSBOARD=',
     host: 'apps.aspneph.org',
     'user-agent': 'PostmanRuntime/7.1.5',
     'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6IkNvdW5jaWwiLCJtZW1iZXJJZCI6MTQ4MiwiaWF0IjoxNTI3NzgwMzkxLCJleHAiOjE1Mjc4MDA1NTF9.z-Q9GRZXHNIb6g8hcTj-xYTUXHKJnWU0IOhRHKtjFHQ',
     'postman-token': '1752cdc3-11d1-4e5a-bd07-1ebd0243a3ef',
     'x-original-url': '/api/v1/members' },
  rawHeaders: 
   [ 'Cache-Control',
     'no-cache',
     'Connection',
     'keep-alive',
     'Content-Length',
     '0',
     'Accept',
     '*/*',
     'Accept-Encoding',
     'gzip, deflate',
     'Cookie',
     'CFGLOBALS=urltoken%3DCFID%23%3D1244685%26CFTOKEN%23%3Dbb7b42884b7da9ac%2D4F657BC4%2DC29B%2D87E3%2D2BC930C9FCEF2B6E%23lastvisit%3D%7Bts%20%272018%2D05%2D02%2011%3A48%3A11%27%7D%23hitcount%3D12%23timecreated%3D%7Bts%20%272018%2D04%2D25%2013%3A02%3A05%27%7D%23cftoken%3D4787f56a879c4c89%2DEC3DC69C%2DC29B%2D87E3%2D228C0668E65EB660%23cfid%3D1200254%23; CFCLIENT_ASPN_DISCUSSBOARD=',
     'Host',
     'apps.aspneph.org',
     'User-Agent',
     'PostmanRuntime/7.1.5',
     'x-access-token',
     'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6IkNvdW5jaWwiLCJtZW1iZXJJZCI6MTQ4MiwiaWF0IjoxNTI3NzgwMzkxLCJleHAiOjE1Mjc4MDA1NTF9.z-Q9GRZXHNIb6g8hcTj-xYTUXHKJnWU0IOhRHKtjFHQ',
     'Postman-Token',
     '1752cdc3-11d1-4e5a-bd07-1ebd0243a3ef',
     'X-Original-URL',
     '/api/v1/members',
     [length]: 22 ],
  trailers: {},
  rawTrailers: [ [length]: 0 ],
  upgrade: false,
  url: '/members',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      Pipe {
        writeQueueSize: 0,
        owner: [Circular],
        onread: 
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        reading: true,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: bound onceWrapper] [length]: 0, [name]: 'bound onceWrapper', listener: [Object] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        finish: 
         { [Function: onSocketFinish]
           [length]: 0,
           [name]: 'onSocketFinish',
           [prototype]: onSocketFinish { [constructor]: [Circular] } },
        _socketEnd: 
         { [Function: onSocketEnd]
           [length]: 0,
           [name]: 'onSocketEnd',
           [prototype]: onSocketEnd { [constructor]: [Circular] } },
        drain: 
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [Object] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout: 
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data: { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error: 
         [ { [Function: socketOnError] [length]: 1, [name]: 'socketOnError', [prototype]: [Object] },
           { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] },
           [length]: 2 ],
        close: 
         [ { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [Object] },
           { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] },
           [length]: 3 ],
        resume: 
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause: 
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: 
         { next: null,
           entry: null,
           finish: { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _writev: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [Object],
              [constructor]: [Object],
              domain: undefined,
              _events: [Object],
              _maxListeners: undefined,
              setMaxListeners: [Object],
              getMaxListeners: [Object],
              emit: [Object],
              addListener: [Object],
              on: [Object],
              prependListener: [Object],
              once: [Object],
              prependOnceListener: [Object],
              removeListener: [Object],
              removeAllListeners: [Object],
              listeners: [Object],
              listenerCount: [Object],
              eventNames: [Object],
              init: [Object],
              defaultConfiguration: [Object],
              lazyrouter: [Object],
              handle: [Object],
              use: [Object],
              route: [Object],
              engine: [Object],
              param: [Object],
              set: [Object],
              path: [Object],
              enabled: [Object],
              disabled: [Object],
              enable: [Object],
              disable: [Object],
              acl: [Object],
              bind: [Object],
              checkout: [Object],
              connect: [Object],
              copy: [Object],
              delete: [Object],
              get: [Object],
              head: [Object],
              link: [Object],
              lock: [Object],
              'm-search': [Object],
              merge: [Object],
              mkactivity: [Object],
              mkcalendar: [Object],
              mkcol: [Object],
              move: [Object],
              notify: [Object],
              options: [Object],
              patch: [Object],
              post: [Object],
              propfind: [Object],
              proppatch: [Object],
              purge: [Object],
              put: [Object],
              rebind: [Object],
              report: [Object],
              search: [Object],
              source: [Object],
              subscribe: [Object],
              trace: [Object],
              unbind: [Object],
              unlink: [Object],
              unlock: [Object],
              unsubscribe: [Object],
              all: [Object],
              del: [Object],
              render: [Object],
              listen: [Object],
              request: [Object],
              response: [Object],
              cache: {},
              engines: {},
              settings: [Object],
              _eventsCount: 1,
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Object] },
           connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         Pipe {
           writeQueueSize: 0,
           onconnection: { [Function: onconnection] [length]: 2, [name]: 'onconnection', [prototype]: [Object] },
           owner: [Circular] },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
        _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
        [Symbol(asyncId)]: 3 },
     _server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [Object],
              [constructor]: [Object],
              domain: undefined,
              _events: [Object],
              _maxListeners: undefined,
              setMaxListeners: [Object],
              getMaxListeners: [Object],
              emit: [Object],
              addListener: [Object],
              on: [Object],
              prependListener: [Object],
              once: [Object],
              prependOnceListener: [Object],
              removeListener: [Object],
              removeAllListeners: [Object],
              listeners: [Object],
              listenerCount: [Object],
              eventNames: [Object],
              init: [Object],
              defaultConfiguration: [Object],
              lazyrouter: [Object],
              handle: [Object],
              use: [Object],
              route: [Object],
              engine: [Object],
              param: [Object],
              set: [Object],
              path: [Object],
              enabled: [Object],
              disabled: [Object],
              enable: [Object],
              disable: [Object],
              acl: [Object],
              bind: [Object],
              checkout: [Object],
              connect: [Object],
              copy: [Object],
              delete: [Object],
              get: [Object],
              head: [Object],
              link: [Object],
              lock: [Object],
              'm-search': [Object],
              merge: [Object],
              mkactivity: [Object],
              mkcalendar: [Object],
              mkcol: [Object],
              move: [Object],
              notify: [Object],
              options: [Object],
              patch: [Object],
              post: [Object],
              propfind: [Object],
              proppatch: [Object],
              purge: [Object],
              put: [Object],
              rebind: [Object],
              report: [Object],
              search: [Object],
              source: [Object],
              subscribe: [Object],
              trace: [Object],
              unbind: [Object],
              unlink: [Object],
              unlock: [Object],
              unsubscribe: [Object],
              all: [Object],
              del: [Object],
              render: [Object],
              listen: [Object],
              request: [Object],
              response: [Object],
              cache: {},
              engines: {},
              settings: [Object],
              _eventsCount: 1,
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Object] },
           connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         Pipe {
           writeQueueSize: 0,
           onconnection: { [Function: onconnection] [length]: 2, [name]: 'onconnection', [prototype]: [Object] },
           owner: [Circular] },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
        _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
        [Symbol(asyncId)]: 3 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': { [Function: listOnTimeout] [length]: 0, [name]: 'listOnTimeout', [prototype]: [Object] },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': { [Function: listOnTimeout] [length]: 0, [name]: 'listOnTimeout', [prototype]: [Object] },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 1310,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': 
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1': 
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2': 
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3': 
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4': { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on: 
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     read: 
      { [Function]
        [length]: 1,
        [name]: '',
        [prototype]: { [constructor]: [Circular] } },
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: 
         { finish: [ [Object], [Object], [length]: 2 ],
           end: { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] } },
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: 
         { [Function: writeHead]
           [length]: 1,
           [name]: 'writeHead',
           [prototype]: writeHead { [constructor]: [Circular] } },
        __onFinished: 
         { [Function: listener]
           [length]: 1,
           [name]: 'listener',
           [prototype]: listener { [constructor]: [Circular] },
           queue: [ [Object], [length]: 1 ] },
        [Symbol(outHeadersKey)]: { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(asyncId)]: 5,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 7,
     [Symbol(triggerAsyncId)]: 5 },
  _consuming: false,
  _dumped: false,
  next: 
   { [Function: next]
     [length]: 1,
     [name]: 'next',
     [prototype]: next { [constructor]: [Circular] } },
  baseUrl: '/api/v1',
  originalUrl: '/api/v1/members',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/members',
     path: '/members',
     href: '/members',
     _raw: '/members' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: 
      { finish: 
         [ { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' },
           { [Function: onevent] [length]: 1, [name]: 'onevent', [prototype]: [Object] },
           [length]: 2 ],
        end: 
         { [Function: onevent]
           [length]: 1,
           [name]: 'onevent',
           [prototype]: onevent { [constructor]: [Circular] } } },
     _eventsCount: 2,
     _maxListeners: undefined,
     output: [ [length]: 0 ],
     outputEncodings: [ [length]: 0 ],
     outputCallbacks: [ [length]: 0 ],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         Pipe {
           writeQueueSize: 0,
           owner: [Circular],
           onread: { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [Object] },
           reading: true,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: [ [Object], [Object], [length]: 2 ],
           finish: { [Function: onSocketFinish] [length]: 0, [name]: 'onSocketFinish', [prototype]: [Object] },
           _socketEnd: { [Function: onSocketEnd] [length]: 0, [name]: 'onSocketEnd', [prototype]: [Object] },
           drain: [ [Object], [Object], [length]: 2 ],
           timeout: { [Function: socketOnTimeout] [length]: 0, [name]: 'socketOnTimeout', [prototype]: [Object] },
           data: { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
           error: [ [Object], [Object], [length]: 2 ],
           close: [ [Object], [Object], [Object], [length]: 3 ],
           resume: { [Function: onSocketResume] [length]: 0, [name]: 'onSocketResume', [prototype]: [Object] },
           pause: { [Function: onSocketPause] [length]: 0, [name]: 'onSocketPause', [prototype]: [Object] } },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Object] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _writev: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: { request: [Object], connection: [Object] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle: Pipe { writeQueueSize: 0, onconnection: [Object], owner: [Circular] },
           _usingSlaves: false,
           _slaves: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
           _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
           [Symbol(asyncId)]: 3 },
        _server: 
         Server {
           domain: null,
           _events: { request: [Object], connection: [Object] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle: Pipe { writeQueueSize: 0, onconnection: [Object], owner: [Circular] },
           _usingSlaves: false,
           _slaves: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
           _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
           [Symbol(asyncId)]: 3 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Object], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Object], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 1310,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': { [Function: parserOnHeaders] [length]: 2, [name]: 'parserOnHeaders', [prototype]: [Object] },
           '1': 
            { [Function: parserOnHeadersComplete]
              [length]: 9,
              [name]: 'parserOnHeadersComplete',
              [prototype]: [Object] },
           '2': { [Function: parserOnBody] [length]: 3, [name]: 'parserOnBody', [prototype]: [Object] },
           '3': 
            { [Function: parserOnMessageComplete]
              [length]: 0,
              [name]: 'parserOnMessageComplete',
              [prototype]: [Object] },
           '4': { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
           _headers: [ [length]: 0 ],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
        on: 
         { [Function: socketOnWrap]
           [length]: 2,
           [name]: 'socketOnWrap',
           [prototype]: socketOnWrap { [constructor]: [Circular] } },
        _paused: false,
        read: 
         { [Function]
           [length]: 1,
           [name]: '',
           [prototype]: { [constructor]: [Circular] } },
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 5,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 7,
        [Symbol(triggerAsyncId)]: 5 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         Pipe {
           writeQueueSize: 0,
           owner: [Circular],
           onread: { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [Object] },
           reading: true,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: [ [Object], [Object], [length]: 2 ],
           finish: { [Function: onSocketFinish] [length]: 0, [name]: 'onSocketFinish', [prototype]: [Object] },
           _socketEnd: { [Function: onSocketEnd] [length]: 0, [name]: 'onSocketEnd', [prototype]: [Object] },
           drain: [ [Object], [Object], [length]: 2 ],
           timeout: { [Function: socketOnTimeout] [length]: 0, [name]: 'socketOnTimeout', [prototype]: [Object] },
           data: { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
           error: [ [Object], [Object], [length]: 2 ],
           close: [ [Object], [Object], [Object], [length]: 3 ],
           resume: { [Function: onSocketResume] [length]: 0, [name]: 'onSocketResume', [prototype]: [Object] },
           pause: { [Function: onSocketPause] [length]: 0, [name]: 'onSocketPause', [prototype]: [Object] } },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Object] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _writev: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: { request: [Object], connection: [Object] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle: Pipe { writeQueueSize: 0, onconnection: [Object], owner: [Circular] },
           _usingSlaves: false,
           _slaves: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
           _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
           [Symbol(asyncId)]: 3 },
        _server: 
         Server {
           domain: null,
           _events: { request: [Object], connection: [Object] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle: Pipe { writeQueueSize: 0, onconnection: [Object], owner: [Circular] },
           _usingSlaves: false,
           _slaves: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _pipeName: '\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004',
           _connectionKey: '-1:\\\\.\\pipe\\b2704ffa-669c-467c-bfbe-43ce6c2f9004:-1',
           [Symbol(asyncId)]: 3 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Object], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Object], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 1310,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': { [Function: parserOnHeaders] [length]: 2, [name]: 'parserOnHeaders', [prototype]: [Object] },
           '1': 
            { [Function: parserOnHeadersComplete]
              [length]: 9,
              [name]: 'parserOnHeadersComplete',
              [prototype]: [Object] },
           '2': { [Function: parserOnBody] [length]: 3, [name]: 'parserOnBody', [prototype]: [Object] },
           '3': 
            { [Function: parserOnMessageComplete]
              [length]: 0,
              [name]: 'parserOnMessageComplete',
              [prototype]: [Object] },
           '4': { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
           _headers: [ [length]: 0 ],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
        on: 
         { [Function: socketOnWrap]
           [length]: 2,
           [name]: 'socketOnWrap',
           [prototype]: socketOnWrap { [constructor]: [Circular] } },
        _paused: false,
        read: 
         { [Function]
           [length]: 1,
           [name]: '',
           [prototype]: { [constructor]: [Circular] } },
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 5,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 7,
        [Symbol(triggerAsyncId)]: 5 },
     _header: null,
     _onPendingData: { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     _startAt: undefined,
     _startTime: undefined,
     writeHead: 
      { [Function: writeHead]
        [length]: 1,
        [name]: 'writeHead',
        [prototype]: writeHead { [constructor]: [Circular] } },
     __onFinished: 
      { [Function: listener]
        [length]: 1,
        [name]: 'listener',
        [prototype]: listener { [constructor]: [Circular] },
        queue: 
         [ { [Function: logRequest] [length]: 0, [name]: 'logRequest', [prototype]: [Object] },
           [length]: 1 ] },
     [Symbol(outHeadersKey)]: { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
  body: {},
  _validationCustomMethods: { sanitizers: {}, validators: {} },
  _validationErrors: [ [length]: 0 ],
  _asyncValidationErrors: [ [length]: 0 ],
  validationErrors: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  asyncValidationErrors: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  getValidationResult: 
   { [Function]
     [length]: 0,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  sanitizeBody: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  sanitizeParams: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  sanitizeQuery: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  sanitizeCookies: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  sanitizeHeaders: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  sanitize: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  checkBody: 
   { [Function]
     [length]: 2,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  checkParams: 
   { [Function]
     [length]: 2,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  checkQuery: 
   { [Function]
     [length]: 2,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  checkCookies: 
   { [Function]
     [length]: 2,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  checkHeaders: 
   { [Function]
     [length]: 2,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  check: 
   { [Function]
     [length]: 2,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  filter: 
   { [Function]
     [length]: 1,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  assert: 
   { [Function]
     [length]: 2,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  validate: 
   { [Function]
     [length]: 2,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } },
  _startAt: [ 570036, 572654834, [length]: 2 ],
  _startTime: 2018-05-31T16:19:56.405Z,
  _remoteAddress: undefined,
  decoded: 
   { admin: 'Council',
     memberId: 1482,
     iat: 1527780391,
     exp: 1527800551 } }
[0mGET /api/v1/members [33m404 [0m118.166 ms - 153[0m
